services:
  receiver:
    build:
      context: receiver
      dockerfile: Dockerfile
    environment:
      - TZ=America/Los_Angeles
    volumes:
      - ./logs/receiver.log:/app/logs/receiver.log
      - ./conf/log_config.yml:/app/conf/log_config.yml
      - ./conf/receiver_config.yml:/app/conf/receiver_config.yml
    depends_on:
      - kafka
    ports:
      - '8080:8080'
  storage:
    build:
      context: storage
      dockerfile: Dockerfile
    environment:
      - TZ=America/Los_Angeles
    volumes:
      - ./logs/storage.log:/app/logs/storage.log
      - ./conf/log_config.yml:/app/conf/log_config.yml
      - ./conf/storage_config.yml:/app/conf/storage_config.yml
    depends_on:
      db:
        condition: service_healthy
      kafka:
        condition: service_started
    ### this port is for testing → need to be deleted → shouldn't expose???
    ports:
      - '8090:8090'
  processing:
    build:
      context: processing
      dockerfile: Dockerfile
    environment:
      - TZ=America/Los_Angeles
    volumes:
      - ./logs/processing.log:/app/logs/processing.log
      - ./conf/log_config.yml:/app/conf/log_config.yml
      - ./conf/processing_config.yml:/app/conf/processing_config.yml
      - ./data/processing/output.json:/app/data/processing/output.json
    depends_on:
      - storage
    ports:
      - '8100:8100'
  analyzer:
    build:
      context: analyzer
      dockerfile: Dockerfile
    environment:
      - TZ=America/Los_Angeles
    volumes:
      - ./logs/analyzer.log:/app/logs/analyzer.log
      - ./conf/log_config.yml:/app/conf/log_config.yml
      - ./conf/analyzer_config.yml:/app/conf/analyzer_config.yml
    depends_on:
      - kafka
    ports:
      - '8111:8111'
  zookeeper:
    image: wurstmeister/zookeeper
    volumes:
      - zookeeper_data:/data
  kafka:
    image: wurstmeister/kafka
    hostname: kafka
    environment:
      KAFKA_CREATE_TOPICS: 'events:1:1'
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_LISTENERS: 'INSIDE://:29092,OUTSIDE://:9092'
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ADVERTISED_LISTENERS: 'INSIDE://kafka:29092,OUTSIDE://kafka:9092'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT'
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./data/kafka:/kafka/
    command: >
      sh -c "rm -f ./kafka/kafka-logs-kafka/meta.properties && start-kafka.sh"
    depends_on:
      - zookeeper
  db:
    image: mysql
    restart: always
    environment:
      MYSQL_RANDOM_ROOT_PASSWORD: ${MYSQL_RANDOM_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    volumes:
      - ./data/database:/var/lib/mysql
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -h localhost -u${MYSQL_USER} -p${MYSQL_PASSWORD} --silent"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
  dashboard:
    build:
      context: dashboard
      dockerfile: Dockerfile
    image: dashboard-ui
    ports:
      - "80:80"
    depends_on:
      - processing
      - analyzer
  consistency_check:
    build:
      context: consistency_check
      dockerfile: Dockerfile
    environment:
      - TZ=America/Los_Angeles
    volumes:
      - ./logs/consistency_check.log:/app/logs/consistency_check.log
      - ./conf/log_config.yml:/app/conf/log_config.yml
      - ./conf/consistency_check_config.yml:/app/conf/consistency_check_config.yml
      # - ./consistency_check/consistency_check_output.json:/app/consistency_check_output.json
      - ./data/consistency_check/output.json:/app/data/consistency_check/output.json
    depends_on:
      - storage
      - analyzer
      - processing
    ports:
      - '7777:7777'

volumes:
  zookeeper_data: