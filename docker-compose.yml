services:
  anomaly_detector:
    build:
      context: anomaly_detector
      dockerfile: Dockerfile
    environment:
      - TZ=America/Los_Angeles
    volumes:
      - ./logs/anomaly_detector.log:/app/logs/anomaly_detector.log
      - ./conf/log_config.yml:/app/conf/log_config.yml
      - ./conf/anomaly_detector.yml:/app/conf/anomaly_detector.yml
    depends_on:
      kafka:
        condition: service_healthy
  receiver:
    deploy:
      replicas: 3
    build:
      context: receiver
      dockerfile: Dockerfile
    environment:
      - TZ=America/Los_Angeles
    volumes:
      - ./logs/receiver.log:/app/logs/receiver.log
      - ./conf/log_config.yml:/app/conf/log_config.yml
      - ./conf/receiver_config.yml:/app/conf/receiver_config.yml
    depends_on:
      kafka:
        condition: service_healthy
  storage:
    build:
      context: storage
      dockerfile: Dockerfile
    environment:
      - TZ=America/Los_Angeles
    volumes:
      - ./logs/storage.log:/app/logs/storage.log
      - ./conf/log_config.yml:/app/conf/log_config.yml
      - ./conf/storage_config.yml:/app/conf/storage_config.yml
    depends_on:
      db:
        condition: service_healthy
      kafka:
        condition: service_healthy
  processing:
    build:
      context: processing
      dockerfile: Dockerfile
    environment:
      - TZ=America/Los_Angeles
      - CORS_ALLOW_ALL=yes
    volumes:
      - ./logs/processing.log:/app/logs/processing.log
      - ./conf/log_config.yml:/app/conf/log_config.yml
      - ./conf/processing_config.yml:/app/conf/processing_config.yml
      - ./data/processing/output.json:/app/data/processing/output.json
    depends_on:
      - storage
    # ports:
    #   - "8100:8100"
  analyzer:
    build:
      context: analyzer
      dockerfile: Dockerfile
    environment:
      - TZ=America/Los_Angeles
      - CORS_ALLOW_ALL=yes
    volumes:
      - ./logs/analyzer.log:/app/logs/analyzer.log
      - ./conf/log_config.yml:/app/conf/log_config.yml
      - ./conf/analyzer_config.yml:/app/conf/analyzer_config.yml
    depends_on:
      kafka:
        condition: service_healthy
    # ports:
    #   - "8111:8111"
  zookeeper:
    image: wurstmeister/zookeeper
    volumes:
      - zookeeper_data:/data
  kafka:
    image: wurstmeister/kafka
    hostname: kafka
    environment:
      KAFKA_CREATE_TOPICS: 'events:1:1'
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_LISTENERS: 'INSIDE://:29092,OUTSIDE://:9092'
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ADVERTISED_LISTENERS: 'INSIDE://kafka:29092,OUTSIDE://kafka:9092'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT'
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_BROKER_ID: 1
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./data/kafka:/kafka/
    command: >
      sh -c "rm -f ./kafka/kafka-logs-kafka/meta.properties && start-kafka.sh"
    depends_on:
      - zookeeper
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--bootstrap-server", "kafka:9092", "--list"]
      interval: 30s
      retries: 10
      start_period: 20s
      timeout: 10s
  db:
    image: mysql
    restart: always
    environment:
      MYSQL_RANDOM_ROOT_PASSWORD: ${MYSQL_RANDOM_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    volumes:
      - ./data/database:/var/lib/mysql
    healthcheck:
      # test: ["CMD-SHELL", "mysqladmin ping -h localhost -u${MYSQL_USER} -p${MYSQL_PASSWORD} --silent"]
      test: ["CMD", "mysql", "-h", "localhost", "-u", "${MYSQL_USER}", "-p${MYSQL_PASSWORD}", "-e", "SELECT 1"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
  dashboard:
    build:
      context: dashboard
      dockerfile: Dockerfile
    image: dashboard-ui
    ports:
      - "80:80"
    depends_on:
      - processing
      - analyzer
      - storage
      - receiver
      - consistency_check
  consistency_check:
    build:
      context: consistency_check
      dockerfile: Dockerfile
    environment:
      - TZ=America/Los_Angeles
      - CORS_ALLOW_ALL=yes
    volumes:
      - ./logs/consistency_check.log:/app/logs/consistency_check.log
      - ./conf/log_config.yml:/app/conf/log_config.yml
      - ./conf/consistency_check_config.yml:/app/conf/consistency_check_config.yml
      - ./data/consistency_check/output.json:/app/data/consistency_check/output.json
    depends_on:
      - storage
      - analyzer
      - processing
    # ports:
    #   - "7777:7777"
volumes:
  zookeeper_data: